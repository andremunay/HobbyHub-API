spring:
  config:
    import: "optional:dotenv:.env"

  application:
    name: hobbyhub

  security:
    oauth2:
      client:
        registration:
          github:
            client-id: ${OAUTH_CLIENT_ID}
            client-secret: ${OAUTH_CLIENT_SECRET}
            scope: repo,read:user

  main:
    banner-mode: "off"
  jpa:
    open-in-view: false

  # --- Liquibase ---
  liquibase:
    enabled: true
    change-log: classpath:db/changelog/master.yaml

  datasource:
    url: ${JDBC_DATABASE_URL}
    driver-class-name: org.postgresql.Driver

  lifecycle:
    timeout-per-shutdown-phase: 30s

server:
  address: 0.0.0.0
  port: 8080
  forward-headers-strategy: native
  servlet:
    session:
      cookie:
        same-site: Lax

# --- Secrets & Configuration ---
github:
  oauth:
    client-id: ${OAUTH_CLIENT_ID}    # injected via GitHub Actions
    client-secret: ${OAUTH_CLIENT_SECRET}

flyio:
  token: ${FLY_API_TOKEN}

management:
  endpoints:
    web:
      exposure:
        include:
          - health
          - info
          - metrics
          - prometheus
  endpoint:
    prometheus:
      enabled: true
    health:
      show-details: always
      probes:
        enabled: true
      group:
        readiness:
          include:
            - db
    metrics:
      tags:
        application: hobbyhub-api

  health:
    db:
      enabled: true
    readiness:
      enabled: true
      include:
        - db
    liveness:
      enabled: true
      include:
        - none

logging:
  level:
    root: INFO
    org.springframework.security: DEBUG
    org.springframework.security.oauth2: DEBUG

springdoc:
  swagger-ui:
    # fetch from the current host, not the hardcoded Server.url
    validator-url: ""           # (optional) disables the online validator
    with-credentials: true      # include your login cookie on every XHR
    oauth2-redirect-url: /swagger-ui/oauth2-redirect.html

    oauth:
      client-id: ${OAUTH_CLIENT_ID}
      client-secret: ${OAUTH_CLIENT_SECRET}
      realm: hobbyhub
      app-name: HobbyHub API
      scopes: repo read:user
      use-pkce-with-authorization-code-grant: true
